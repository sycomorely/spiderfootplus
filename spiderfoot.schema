-------------------------------------------------------------------------------
-- Name:         spiderfoot.schema
-- Purpose:      Database schema for SpiderFoot
--
-- Author:      Steve Micallef <steve@binarypool.com>
--
-- Created:     10/05/2012
-- Copyright:   (c) Steve Micallef 2012
-- Licence:     GPL
-------------------------------------------------------------------------------

--
-- Schema is for SQLite but has been left very generic in order to be compatible
-- with any SQL-compliant RDBMS.
--

PRAGMA journal_mode=WAL;

--
-- Descriptions of event types
--
DROP TABLE tbl_event_types;
CREATE TABLE tbl_event_types (
    event       VARCHAR NOT NULL PRIMARY KEY,
    event_descr VARCHAR NOT NULL,
    event_raw   INT NOT NULL DEFAULT 0
);

--
-- Configuration: The configuration last set.
--
DROP TABLE tbl_config;
CREATE TABLE tbl_config (
    scope   VARCHAR NOT NULL,
    opt     VARCHAR NOT NULL,
    val     VARCHAR NOT NULL,
    PRIMARY KEY (scope, opt)
);

--
-- Scan instances: Each scan run by the user against a target.
--
DROP TABLE tbl_scan_instance;
CREATE TABLE tbl_scan_instance (
	guid		VARCHAR NOT NULL PRIMARY KEY,
	name		VARCHAR NOT NULL,
	seed_target	VARCHAR NOT NULL,
	created		INT DEFAULT 0,
	started		INT DEFAULT 0,
	ended		INT DEFAULT 0,
	status		VARCHAR NOT NULL
);

--
-- Scan events: Log messages generated during the scan.
--
DROP TABLE tbl_scan_log;
CREATE TABLE tbl_scan_log (
    scan_instance_id    VARCHAR NOT NULL REFERENCES tbl_scan_instance(guid),
    generated           INT NOT NULL,
    component           VARCHAR,
    type                VARCHAR NOT NULL,
    message             VARCHAR
);

--
-- Scan configs: The configuration used for a scan run.
--
DROP TABLE tbl_scan_config;
CREATE TABLE tbl_scan_config (
	scan_instance_id	VARCHAR NOT NULL REFERENCES tbl_scan_instance(guid),
	component		VARCHAR NOT NULL,
	opt			VARCHAR NOT NULL,
	val			VARCHAR NOT NULL
);

--
-- Scan results: A collection of events stored in a semi-optimized way.
--
DROP TABLE tbl_scan_results;
CREATE TABLE tbl_scan_results (
	scan_instance_id	VARCHAR NOT NULL REFERENCES tbl_scan_instance(guid),
    hash                VARCHAR NOT NULL,
    type                VARCHAR NOT NULL REFERENCES tbl_event_types(event),
    generated           INT NOT NULL,
    confidence          INT NOT NULL DEFAULT 100,
    visibility          INT NOT NULL DEFAULT 100,
    risk                INT NOT NULL DEFAULT 0,
    module              VARCHAR NOT NULL,
    data                VARCHAR
    source_event_hash  VARCHAR DEFAULT 'ROOT'
);

CREATE INDEX idx_scan_results_id ON tbl_scan_results (scan_instance_id);
CREATE INDEX idx_scan_results_type ON tbl_scan_results (scan_instance_id, type);
CREATE INDEX idx_scan_results_hash ON tbl_scan_results (hash);
CREATE INDEX idx_scan_logs ON tbl_scan_log (scan_instance_id);
